@model Business.DTOs.DepartmentDtos.DepartmentCreateDTO

@{
    ViewData["Title"] = "Yeni Bölüm Ekle";
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">
                        <i class="fas fa-plus me-2"></i>
                        Yeni Bölüm Ekle
                    </h4>
                </div>
                <div class="card-body">
                    @if (TempData["Error"] != null)
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <i class="fas fa-exclamation-circle me-2"></i>
                            @TempData["Error"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>
                    }

                    <form asp-action="Create" method="post" class="needs-validation" novalidate>
                        @Html.AntiForgeryToken()

                        <div class="row">
                            <div class="col-md-12 mb-3">
                                <label asp-for="Name" class="form-label fw-bold">
                                    <i class="fas fa-building me-1"></i>
                                    Bölüm Adı *
                                </label>
                                <input asp-for="Name" class="form-control" placeholder="Örn: Bilgisayar Mühendisliği" required />
                                <span asp-validation-for="Name" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-12 mb-3">
                                <label asp-for="Code" class="form-label fw-bold">
                                    <i class="fas fa-code me-1"></i>
                                    Bölüm Kodu *
                                </label>
                                <input asp-for="Code" class="form-control" placeholder="Örn: BILMUH" required style="text-transform:uppercase" />
                                <span asp-validation-for="Code" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-12 mb-3">
                                <label asp-for="UniversityId" class="form-label fw-bold">
                                    <i class="fas fa-university me-1"></i>
                                    Üniversite *
                                </label>
                                @Html.DropDownListFor(m => m.UniversityId,
                                         ViewBag.UniversityId as List<SelectListItem>,
                                         "Üniversite Seçiniz",
                                         new { @class = "form-select", required = "required" })
                                <span asp-validation-for="UniversityId" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="d-flex justify-content-between">
                            <a asp-action="Index" class="btn btn-secondary">
                                <i class="fas fa-arrow-left me-1"></i>
                                Geri Dön
                            </a>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save me-1"></i>
                                Kaydet
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <script>
        // Bootstrap form validation
        (function () {
            'use strict';
            window.addEventListener('load', function () {
                var forms = document.getElementsByClassName('needs-validation');
                Array.prototype.forEach.call(forms, function (form) {
                    form.addEventListener('submit', function (event) {
                        if (!form.checkValidity()) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                        form.classList.add('was-validated');
                    }, false);
                });
            }, false);
        })();

        // Kod alanını otomatik büyük harfe çevir
        document.querySelector('[name="Code"]').addEventListener('input', function (e) {
            e.target.value = e.target.value.toUpperCase();
        });
    </script>
}
